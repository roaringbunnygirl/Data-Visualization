---
title: "L01 Introduction"
subtitle: "Data Visualization (STAT 302)" 
author: "Sherry Chen"

format:
  html:
    toc: true
    embed-resources: true
    link-external-newwindow: true

execute:
  warning: false

from: markdown+emoji 
---


::: {.callout-warning}
This is a template file and may not contain everything seen in the instructions html (`L01_introduction.html`). For example, images or graphs are not usually included in the template. **Rely on the instructions html file for directions, not the template file.**
:::

## Goals

1.  Ensure software for this course is properly installed and functional
2.  Understand the importance of visualization
3.  Develop and follow a proper workflow
4.  Construct and explore a few plots using `ggplot2`
5.  Add layers to a plot that include title, axis, and pre-set themes

**Don't worry if you cannot do everything here by yourself.** You are just getting started and the learning curve is steep, but remember that the instructional team and your classmates will be there to provide support. Persevere and put forth an honest effort and this course will payoff.

```{r}
#| label: load-packages

# Load package(s) - Will be demonstrated in video  
library(tidyverse)
library(skimr)
library(devtools)
# Data can go here as well
load("data/legosets.rda")



```

::: callout-tip
## Organization is important!

1.  All packages should always be loaded at the TOP of the document.

2.  All data should be in your `/data` subdirectory. Data loading should go at the top of the document under the libraries.
:::

## Tasks

Complete the following tasks and **include some indication that you have completed each** in your document.

### Task 1

Download and install [R Software](https://cran.rstudio.com/).

### Task 2

1.  Download and install [RStudio](https://posit.co/download/rstudio-desktop/).
2.  Open RStudio and ensure it and R have been properly installed.
3.  Go to **Tools** \> **Global Options** and change the two indicated settings below and click **Apply**. Your other options are likely different than what is pictured. This is okay and we suggest you leave them as is until you become more familiar with RStudio.

**See html file for missing figure**

### Task 3

Take some time to explore the [Quarto](https://quarto.org/) and [ggplot2](https://ggplot2.tidyverse.org/index.html) websites. We suggest bookmarking them because they will be extremely useful references. 

We highly recommend reading through the [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/rstudio.html).

### Task 4

Install the following packages:

-   `tidyverse`, actually it is a collection/universe of packages being installed
-   `skimr`
-   `devtools`

### Task 5

1.  Download `L01_introduction.zip` from Canvas.
2.  Unzip the file and place the `data_vis_labs` directory where you would like to keep all of your lab work for this course.
3.  Open RStudio and create a project folder for this *existing directory*.
4.  Rename `template_L01.qmd` to your `Lastname_Firstname_L01.qmd`
5.  Render the file with `Cmd/Ctrl + Shift + K` or click the Render button.

### Task 6 (optional)

If you are new to RStudio we strongly recommend reading through Chapters 1-4 of the [Stat 202 text book](https://nustat.github.io/intro-stat-data-sci/)

## Exercise 1

Let's delve into why data visualizations are important.

### Visualization 1

Read the following article and answer the following questions.

[bars_vs_grocery_stores](https://flowingdata.com/2014/05/29/bars-versus-grocery-stores-around-the-world/)

1)  List one thing you learned from the article?

**The data points on the map shows the comparison of the number of grocery stores vs bars in each state, where wisconsin has 2.7 times the bars as grocery stores in America, with the third highest rate with about "8 bars per 10,000 people".This information comes from google API. **

2)  How did the main visualization (United States) enhance the article?

**Because disparate colors were used for grocery stores vs bars, we can easily identify which locations have more groceries vs bars, and potential cultural impact each place has. **

3)  List at least one thing you liked about the \[United States\] graphic and one thing you think could be improved.

**I liked the change in tone, or overlap in color when there are more than one bars at a certain location, displaying preciseness. I think it could be improved with causes of significant differences**



### Visualization 2

Open this [dashboard](https://edgarruiz.shinyapps.io/db-dashboard/) and answer the following questions.

1)  What story is this dashboard telling and how do the visualizations enhance that?

**This dashboard shows in different colors of number of flights in total, average flights per ady, and the percentage of flights delayed. The bar graphs display the total number of flights dedicated to each month, and another bar graph of airports with the number of flights. We can clearly see the Hartsfield Jackson Atlanta Int has the most number of flights with the distinctive color.  **

2)  What might a dashboard provide that a static graphic cannot.

**The dashboard can provide a total and precise count, whereas graphics are determined by its surface area/area, and is made from the numbers from the dashboard.**

::: callout-important
I will work through exercises 2-4 in a video. Please code along and take notes.
:::

## Exercise 2

## Exercise 2

Let's look at some interesting patterns in the history of LEGO! We'll be using data taken from the [`lego` package](https://github.com/seankross/lego). A copy of the data is located here `data/legosets.rda`.

First, let's look at the average cost of LEGO sets over time. The main variable of interest here is `USD_MSRP`, or the manufacturer's suggested retail price in constant dollars. Let's recreate the following graphic.

:::{.callout-tip icon=false}
## Solution

As time goes on, the price of legos increase(upward trend). There seems to be a positive relationship between lego price and year.
```{r}
#| label: ex-2 plot

# data wrangling
yearly_price <- legosets |> 
  group_by(Year) |> 
  summarise(
    avg_usd_mrsp = mean(USD_MSRP, na.rm = TRUE),
    med_usd_msrp = median(USD_MSRP, na.rm = TRUE),
    num_sets = n() - sum(is.na(USD_MSRP)))
# annual price of lego sets 
ggplot(
  yearly_price, 
  aes(x = Year, y = avg_usd_mrsp)) +
  geom_point() +
  geom_line() +
  geom_smooth()+
  theme_minimal() +
  labs(
    title = "Annual Average Price of LEGO sets",
    subtitle = "Amounts are reported in current USD",
    y = "Average Price(USD)",
    caption = "Source: LEGO"
  )
```

:::


## Exercise 3

Let's explore how many unique themes LEGO now offers. 

```{r}
#| label: ex3
#| echo: false

 
# remove #| eval: FALSE so the plot appears 

#data wrangling
theme_counts <- legosets %>%
  count(Theme)

theme_counts %>%
  ggplot(aes(y = Theme, x = n)) +
  geom_col() +    #or geom_bar(stat = "identity") +
  labs(
    x = "Number of Sets",
    y = NULL
  ) +
  theme_minimal()
```

What is bad/ugly about the plot above?

**The y-column of names is hard to read due to overlap, and the number of sets association with each name is very thin and hard to compare to. **

Now remake the plot BUT with the improvements.

:::{.callout-tip icon=false}
## Solution
Below shows lego types with over 100 sets organized from lowest number of sets to largest. The Duplo and Star Wars set is taking the lead being within the range of 350-500. 

```{r}
#| label: ex3- fixed

#alt plot 
theme_counts %>%
  filter(n >= 100) |> 
  arrange(desc(n)) |> 
  mutate(Theme = fct_inorder(Theme)) |> 
  ggplot(aes(y = Theme, x = n)) +
  geom_point() + 
  geom_segment(aes(y = Theme, x = 0, yend = Theme, xend = n)) + #or geom_bar(stat = "identity") +
  labs(
    x = "Number of Sets",
    y = NULL
  ) +
  theme_minimal()
```


:::



## Exercise 4

Now you try, let's look at how the number of pieces per set has changed over time. Because Duplo sets are much smaller (since they're designed for toddlers), we made a special indicator variable for them in the code below.

Use an appropriate graph to plot the average number of pieces over time. Have either separate lines or separate plots for the Duplo and Lego categories. Be sure the title, x-axis, and y-axis are properly labeled. 

:::{.callout-tip icon=false}
## Solution
```{r}
#| label: ex4-data-wrangle


# remove #| eval: FALSE or this chunk won't evaluate

# Create the summary data frame
pieces_per_year <- legosets %>%
  # new indicator variable
  mutate(Duplo = ifelse(Theme == "Duplo", "Duplo", "Lego")) |> 
  group_by(Year, Duplo) |> # group_by() both year and Duplo
  summarise(
    avg_pieces = mean(Pieces, na.rm = TRUE),  # Corrected column name
    med_pieces = median(Pieces, na.rm = TRUE),
    num_sets = sum(!is.na(Pieces))
  ) |> 
  ungroup()

# Create the graphic
pieces_per_year |> 
  filter(Year >= 1990) |> 
  ggplot(
    mapping = aes(x = Year, y = avg_pieces, color = Duplo)) +
  geom_line() +
  geom_point() +
  facet_wrap(~ Duplo, scales = "free_y", ncol = 1) +
  geom_smooth() +
  theme_minimal() +
  labs(
    title = "Average number of pieces in a LEGO set over time",
    y = "Average Pieces in a LEGO Set",
    caption = "Source: LEGO"
  )


```
:::
What trends do you notice in the plots? Are you surprised by the plots?

**For the Lego company, they peaked around 2007/2008and hit over 500 pieces but stabilized to 200 pieces in 2011/2012. The trend shows growth in complexity during the early 2000s, most likely due to sets being introduced or possibly aimed at older children or collecters. After peaking, they stabilize. It was surprising for them to have a substantial increase of legos around the early 2000s. For the Duplo company, the average number of pieces gradually increased from 1990 to the early 2000s. They were well under 50 pieces, which may come to be surprising due to their large number of themes. **